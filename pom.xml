<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>site.share2u</groupId>
	<artifactId>view</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<properties>
		<!-- spring版本号 -->
		<spring.version>4.3.10.RELEASE</spring.version>
		<!-- mybatis版本号 -->
		<mybatis.version>3.2.6</mybatis.version>
		<!-- log4j日志文件管理包版本 -->
		<slf4j.version>1.7.7</slf4j.version>
		<log4j.version>1.2.17</log4j.version>
		<jackson.version>2.8.4</jackson.version>
		<jmockit.version>1.33</jmockit.version>

		<!-- 是否跳过单元测试 -->
		<maven.surefire.skip>false</maven.surefire.skip>
		<maven.surefire.testFailureIgnore>true</maven.surefire.testFailureIgnore>
		<argLine>-Xms512m -Xmx1024m</argLine>
		<!-- 是否跳过单元测试覆盖率统计 -->
		<sonar.skip>false</sonar.skip>
		<jacoco.version></jacoco.version>
		<!-- 如果你想过滤掉一些自动生成的代码，比如：mybatis entity/mapper，请将下面打开 -->
		<!--
        <sonar.exclusions>
           src/main/java/com/daojia/ptht/order/repository/pojo/**/*,
           src/main/java/com/daojia/ptht/order/repository/mybatismapper/**/*
        </sonar.exclusions>
        -->
	</properties>
	<dependencies>
        <dependency>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
            <version>${jmockit.version}</version>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit-coverage</artifactId>
			<version>1.23</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<!-- 表示开发的时候引入，发布的时候不会加载此包 -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<classifier>runtime</classifier>
			<scope>test</scope>
			<version>0.7.7.201606060606</version>
		</dependency>
		<!-- spring核心包 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!--aspectj对spring aop的实现 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.8.9</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjtools</artifactId>
			<version>1.8.9</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.7.4</version>
		</dependency>
		<!-- mybatis核心包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<!-- mybatis/spring包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.2.2</version>
		</dependency>
		<!-- 导入java ee jar 包 -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>7.0</version>
		</dependency>
		<!-- 导入Mysql数据库链接jar包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.30</version>
		</dependency>
		<!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.2.2</version>
		</dependency>
		<!--阿里druid数据库连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.29</version>
		</dependency>

		<!-- JSTL标签类 -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- 日志文件管理包 -->
		<!-- log start -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>


		<!-- 格式化对象，方便输出日志 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.9</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- log end -->
		<!-- 映入JSON -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- 上传组件包 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.9</version>
		</dependency>
		<!--echarts-java -->
		<dependency>
			<groupId>com.github.abel533</groupId>
			<artifactId>ECharts</artifactId>
			<version>3.0.0.2</version>
		</dependency>

		<!--神经网络 -->
		<dependency>
			<groupId>org.beykery</groupId>
			<artifactId>neuroph</artifactId>
			<version>2.92</version>
			<exclusions>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- -->
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-resources-plugin</artifactId>
			<exclusions>
				<!--解决slf4j冲突 -->
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
				</exclusion>
				<exclusion>
					<artifactId>slf4j-api</artifactId>
					<groupId>org.slf4j</groupId>
				</exclusion>
			</exclusions>
			<version>2.7</version>
		</dependency>
		<!--时间工具 -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.9.9</version>
		</dependency>


		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>2.19.1</version>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.jacoco</groupId>-->
			<!--<artifactId>org.jacoco.agent</artifactId>-->
			<!--<classifier>runtime</classifier>-->
			<!--<scope>test</scope>-->
			<!--<version>${jacoco.version}</version>-->
		<!--</dependency>-->

	</dependencies>


	<build>
		<finalName>view</finalName>
		<plugins>
			<!--jetty -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.0.0.M3</version>
				<configuration>
					<stopPort>9967</stopPort>
					<stopKey>foo</stopKey>
					<!--新代码扫描时间秒 -->
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<!--虚拟目录 -->
					<webApp>
						<contextPath>/</contextPath>
					</webApp>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<!--端口号 -->
							<port>80</port>
						</connector>
					</connectors>
				</configuration>
			</plugin>
			<!-- 编译插件，请检查pom中的compiler插件，如果有skip配置，一定不要配置为skip=true -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<!--<skip>true</skip>-->
				</configuration>
			</plugin>
			<!-- AspectJ 编译插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>aspectj-maven-plugin</artifactId>
				<version>1.8</version>
				<configuration>
					<verbose>true</verbose>
					<privateScope>true</privateScope>
					<showWeaveInfo>true</showWeaveInfo>
					<source>1.8</source>
					<target>1.8</target>
					<complianceLevel>1.8</complianceLevel>
					<!-- <encoding>UTF-8</encoding> -->
					<verbose>false</verbose>
					<outxml>true</outxml>
					<aspectLibraries>
						<!-- 此处定义外部的aspect包，例如spring的事务aspect包 。这里引用的包必须在依赖中声明 -->
						<!-- <aspectLibrary> <groupId>org.springframework</groupId> <artifactId>spring-aspects</artifactId> 
							</aspectLibrary> -->
					</aspectLibraries>
				</configuration>
			</plugin>
			<!-- 单元测试覆盖率 -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.7.201606060606</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<skip>${sonar.skip}</skip>
							<!-- 如果你想过滤掉一些自动生成的代码,即计算覆盖率的时候不计入该部分代码，比如：mybatis entity/mapper，请将下面打开 -->
							<!-- 注意，和sonar.exclusions不同，不包含src/main/java，同时只支持 * 和 ? 通配符，不支持 "**"
                            <excludes>
                                <exclude>com/daojia/ptht/order/repository/pojo/*</exclude>
                                <exclude>com/daojia/ptht/order/repository/mybatismapper/?/service</exclude>
                            </excludes>
                            -->
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 单元测试，如果之前项目中有配置的surefire插件，一定要替换成下面的形式 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<skip>${maven.surefire.skip}</skip>
					<testFailureIgnore>${maven.surefire.testFailureIgnore}</testFailureIgnore>
					<!-- 添加下面两行，解决单元测试时wf、scf抛错 -->
					<useManifestOnlyJar>false</useManifestOnlyJar>
					<useSystemClassLoader>true</useSystemClassLoader>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
